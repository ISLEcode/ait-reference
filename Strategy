---
title    : Repository management strategy
revision : 2020-08-06 (Thu) 14:41:00
---

Іt's been a (very) long time since the reference lists used over the years had not been consolidated. This is what has started
here. The reorganisation strategy is as follows:

1.  The repository will be organised as a regular source code repository with the following top-level directories:

    _in
    ~   The conventional directory name for locally stored data which is ignored in the Git-based version control workflow.

    bin
    ~   Store for dedicated build-time utilities used to download/extract/convert datasets and reference material.

    src
    -   Store for hand-maintained datasets and/or for datasets which are _spooled_ through this repository — that is datasets
        which cannot be auto-magically generated with no human interaction.

    out
    ~   The conventional directory used at build-time to spool build intermediate and final products. This directory is not
        under version control and should never be part of distributed tarballs.

    wip
    ~   This _work in progess_ repository should no exist in the master branch. It is however recommended to use this directory
        in feature branches to collect input material that needs to be further _digested_ before migrating it to the _src_
        directory. In such cases, files and folders should be placed in a sub-directory whose name is the name of the branch.

1.  The datasets will be organised in collections. The following collections are foreseen:

    acronyms
    ~   Acronyms, initialisms, and abbreviations of all kinds are maintained here as simple and ready to use YAML files
        essentially consisting of the term and its definition; when used in conjunction with dictionary, the dataset's
        front matter should indicated the bound dataset and each term should have the necessary cross-referencing code
        appended to its definition.

    clists (or controlled lists)
    ~   Controlled lists are used as building blocks of a broader taxonomy which is represented by this repository as a whole.
        Each controlled list representes a normalised concept or series; most of which are pretty obvious. Where ever possible,
        when standardised material exists — in particular those maintained by official organisations; the we should do our best
        to abide to those ѕtandards.

        Note: the rich collection of such lists created circa 2003 for Interwage's international payroll and expatriate management
        system have been passed over to the SAMinfo ERP except for generic lists such as countries, currencies and timeuzones. My
        inted however is to bring back to this repository what could be classified as _lorem ipsum_ datasets such as abstract
        contact names, addresses and phone numbers which are useful at design and testing phases.

    dictionaries (abbreviated as `dict`)
    ~   Reference lists of terms and their definitions organised into collections such as ITIL, computer science, or general
        knowledge dictionaries. Are also included in this category the word lists of spoken languages used by spell checking
        software, such as _aspell(1)_.

        Note: in previous incarnations of the AIT framework — the _Dragonfly project_, the _Deutsch Bank PBSC factory_, or the
        _IBM Tahtum factory_, we used to have `etc/lists` and `etc/wlists` directories for various word lists. Such lists, that
        can't be classified in other categories, will be placed here.

    quotes
    ~   Quotes have been managed so far within the context of each AIT tool, such as _cm-qotd(1)_ — the _quote of the day_ command
        line utility. These will progressively be extracted and collected here and organised into languages and topics. There are
        a lot of online websites managing quotes; we should see how to keep this category lean.

1.  All collections will be accessible through URI schemes that will be known and handled by the related AIT utilities, in
    particular in Markdown documents and their various transformations to other formats (e.g. HTML, LaTeX and office formats, PDF,
    ...). The general syntax for such URIs will:

    -   Use the singular form of the collection name, or an recognisable abbreviation, as the protocol — `abbr` for acronyms and
        abbreviations, `list` for controlled lists, `word`^[The _dict_ protocol is already defined.] for dictionaries, and `quote`
        for quotes.

    -   The domain name will represent the path to the YAML file without its extension — hence using the doc (`.`) as the path
        separator; for instance `dict://itil/SLA`, to lookup the _SLA_ term in the _itil_ dictionary. If the `itil.yaml` file
        was in the `informatics` sub-directory, then we would have `dict://informatics.itil/SLA`. As for regular domain names,
        the case is non-sensitive, and target YAML file names are expected to only be in lowercase.

    -   The term to lookup is the last element of the URI — `SLA` in our previous example. The term's case responds to
        typographical conventions only and can be mixed case; however the lookup will be case insensitive and all successive
        on-alphanumeric characters will be converted to a single dash (`-`) character.

    -   The bookmark syntax of URIs will be used to introduce _verbs_ either generic to all collections — `dict://itil#random`,
        or specific to a given collection `quote://english#motivational`.

    -   The query syntax is reserved for subsequent introduction of a REST-like interface, if not to update, at least to perform
        extended querying of the collection's content.


1.  ID

<!-- vim: set digraph et nospell syn=md :-->
